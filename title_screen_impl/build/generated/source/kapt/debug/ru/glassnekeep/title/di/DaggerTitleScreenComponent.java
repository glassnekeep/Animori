// Generated by Dagger (https://dagger.dev).
package ru.glassnekeep.title.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import ru.glassnekeep.core.di.AppDispatchers;
import ru.glassnekeep.media_data.MediaDataProvider;
import ru.glassnekeep.media_data.repository.MediaRepository;
import ru.glassnekeep.media_data.use_cases.GetAnimeListUseCase;
import ru.glassnekeep.media_data.use_cases.GetAnimeUseCase;
import ru.glassnekeep.title.TitleScreenViewModel;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerTitleScreenComponent {
  private DaggerTitleScreenComponent() {
  }

  public static TitleScreenComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements TitleScreenComponent.Factory {
    @Override
    public TitleScreenComponent create(MediaDataProvider mediaDataProvider, int mediaId) {
      Preconditions.checkNotNull(mediaDataProvider);
      Preconditions.checkNotNull(mediaId);
      return new TitleScreenComponentImpl(mediaDataProvider, mediaId);
    }
  }

  private static final class TitleScreenComponentImpl implements TitleScreenComponent {
    private final MediaDataProvider mediaDataProvider;

    private final Integer mediaId;

    private final TitleScreenComponentImpl titleScreenComponentImpl = this;

    private TitleScreenComponentImpl(MediaDataProvider mediaDataProviderParam,
        Integer mediaIdParam) {
      this.mediaDataProvider = mediaDataProviderParam;
      this.mediaId = mediaIdParam;

    }

    @Override
    public GetAnimeUseCase getGetAnimeUseCase() {
      return Preconditions.checkNotNullFromComponent(mediaDataProvider.getGetAnimeUseCase());
    }

    @Override
    public GetAnimeListUseCase getGetAnimeListUseCase() {
      return Preconditions.checkNotNullFromComponent(mediaDataProvider.getGetAnimeListUseCase());
    }

    @Override
    public MediaRepository getMediaRepository() {
      return Preconditions.checkNotNullFromComponent(mediaDataProvider.getMediaRepository());
    }

    @Override
    public AppDispatchers getDispatchers() {
      return Preconditions.checkNotNullFromComponent(mediaDataProvider.getDispatchers());
    }

    @Override
    public TitleScreenViewModel getViewModel() {
      return new TitleScreenViewModel(Preconditions.checkNotNullFromComponent(mediaDataProvider.getGetAnimeUseCase()), mediaId);
    }
  }
}
